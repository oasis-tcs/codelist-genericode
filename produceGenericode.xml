<project default="make" xmlns:if="ant:if" xmlns:unless="ant:unless">

<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

<target name="make">
  
  <property name="thisdir" value="${user.dir}"/>
  <property name="consoleFile" location="${thisdir}/build.console.${label}.txt"/>
  <record name="${consoleFile}" action="start"/>
  <mkdir dir="${dir}"/>

  <condition property="is-dos">
    <os family="windows"/>
  </condition>

  <!--documentation-->
  <echo message="package=${package}"/>
  <echo message="stage=${stage}"/>
  <echo message="prevStage=${prevStage}"/>
  <echo message="version=${label}"/>

  <delete  dir="${dir}/${package}-${stage}-${label}"/>
  <mkdir   dir="${dir}/${package}-${stage}-${label}"/>

  <!--copy the authored content to the target directory-->
  <copy todir="${dir}">
    <fileset dir=".">
      <include name="genericode.xml"/>
      <include name="*.ent.xml"/>
      <include name="art/**"/>
      <include name="htmlart/**"/>
      <include name="realta-user-parameters.xml"/>
    </fileset>
  </copy>
  <delete dir="${dir}/xsd"/>
  <copy todir="${dir}/xsd">
    <fileset dir="xsd">
      <include name="**"/>
    </fileset>
  </copy>
  <delete dir="${dir}/sch"/>
  <copy todir="${dir}/sch">
    <fileset dir="sch">
      <include name="**"/>
    </fileset>
  </copy>
  <copy todir="${dir}/db">
    <fileset dir="db/spec-0.8/htmlruntime">
     <include name="**"/>
    </fileset>
  </copy>

  <!--rename the source file to the target requirement-->
  <copy file="genericode.xml" preservelastmodified="true" todir="${dir}"/>

  <!--create the conformance entities-->
  <java classname="net.sf.saxon.Transform" dir="${dir}" fork="true"
        classpath="db/spec-0.8/validate/saxon9he.jar"
        resultproperty="entitiesCreatedResult">
    <arg value="-xsl:${thisdir}/rules2entities.xsl"/>
    <arg value="-s:${dir}/genericode.xml"/>
    <arg value="-o:${dir}/dummy-should-not-exist.txt"/>
  </java>
  <condition property="entitiesCreated">
    <equals arg1="${entitiesCreatedResult}" arg2="0"/>
  </condition>
 
  <!--assemble the inputs into a single XML file, no entities-->
  <java classname="net.sf.saxon.Transform" dir="${dir}"
        classpath="db/spec-0.8/validate/saxon9he.jar"
        resultproperty="entitiesAssembledResult"
        if:set="entitiesCreated">
    <arg value="-xsl:${thisdir}/assembleEntities.xsl"/>
    <arg value="-s:${dir}/genericode.xml"/>
    <arg value="-o:${dir}/${package}-${stage}.xml"/>
  </java>
  <condition property="entitiesAssembled">
    <equals arg1="${entitiesAssembledResult}" arg2="0"/>
  </condition>

  <sequential if:set="entitiesAssembled">
    <!--validate that the authored content is acceptable-->
    <antcallback target="-validate" return="validatedInputs">
      <param name="source" value="${dir}/${package}-${stage}.xml"/>
    </antcallback>
    <delete file="output.txt"/>
  
    <antcall target="-make-docs" if:set="validatedInputs"/>
   
    <antcall target="-package-docs"/>
  </sequential>

  <!--At this point all of the documentation has been zipped up in its own
      package, ready to use. The artefacts are assumed to have been zipped
      up already before this process has run-->

  <antcall target="-package-distribution"/>
</target>

<target name="-validate" depends="-validate-shell,-validate-dos">
  <condition property="validatedInputs">
    <equals arg1="${validateResult}" arg2="0"/>
  </condition>
</target>

<target name="-validate-shell" unless="${is-dos}">
  <exec resultproperty="validateResult" executable="sh">
    <arg value="db/spec-0.8/validate/validate.sh"/>
    <arg value="${source}"/>
  </exec>
</target>

<target name="-validate-dos" if="${is-dos}">
  <exec resultproperty="validateResult" executable="cmd.exe">
    <arg value="/c"/>
    <arg value="doc\db\spec-0.8\validate\validate.bat"/>
    <arg value="${source}"/>
  </exec>
</target>

<target name="-delete-results-not-being-produced" 
        if="not-attempting-to-produce-necessary-results">
  <delete file="${dir}/${package}-${stage}.html"/>
  <delete file="${dir}/${package}-${stage}.pdf"/>
  <delete file="${dir}/iso-iec-00000-genericode-draft.pdf"/>
  <delete file="${dir}/${package}-${stage}-pub.zip"/>
</target>

<target name="-check-docs">
  <uptodate targetfile="${dir}/${package}-${stage}.html"
            property=  "docs-gc-html-okay">
    <srcfiles dir="${dir}">
      <include name="genericode.xml"/>
    </srcfiles>
  </uptodate>  
  <uptodate targetfile="${dir}/${package}-${stage}.pdf"
            property=  "docs-gc-pdf-okay">
    <srcfiles dir="${dir}">
      <include name="${package}-${stage}.xml"/>
    </srcfiles>
  </uptodate>
  <uptodate targetfile="${dir}/iso-iec-00000-genericode-draft.pdf"
            property=  "docs-gc-iso-okay">
    <srcfiles dir="${dir}">
      <include name="${package}-${stage}.xml"/>
    </srcfiles>
  </uptodate>
  <condition property="docs-gc-okay">
    <and>
      <istrue value="${docs-gc-xml-okay}"/>
      <istrue value="${docs-gc-html-okay}"/>
      <istrue value="${docs-gc-pdf-okay}"/>
      <istrue value="${docs-gc-iso-okay}"/>
    </and>
  </condition>
</target>

<target name="-make-docs" depends="-check-docs" unless="docs-gc-okay">
  <!--remove old results-->
  <delete file="${dir}/${package}-${stage}.html"/>
  <delete file="${dir}/${package}-${stage}.pdf"/>
  <delete file="${dir}/iso-iec-00000-genericode-draft.pdf"/>
  <delete file="${dir}/${package}-${stage}-pub.zip"/>
  
  <!--package inputs to the publishing process-->
  <zip destfile="${dir}/${package}-${stage}-pub.zip">
    <fileset dir="${dir}">
      <include name="${package}-${stage}.xml"/>
      <include name="art/**"/>
      <include name="db/**"/>
    </fileset>
    <fileset dir="${dir}">
      <include name="realta-user-parameters.xml"/>
    </fileset>
  </zip>

  <!--create publishing outputs-->
  <echo message="Submitting print job..."/>
  <property name="serverScript" location="RealtaServerAnt.xml"/> 
  <ant antfile="${serverScript}" dir="${dir}">
    <property name="entrypoint" value="OASIS-spec2pdfhtml-ISO-pdf"/>
    <property name="fileupload"
              value="${package}-${stage}-pub.zip"/>
    <property name="dateprefix" value="genericode 1.0"/>
  </ant>
  <echo message="Check and cleanup..."/>
  <available property="ready-pdf" file="${dir}/${package}-${stage}.oasis.pdf"/>
  <echo unless:set="ready-pdf" message="PDF not created"/>
  <echo if:set="ready-pdf" message="PDF created"/>
  <available property="ready-iso" file="${dir}/${package}-${stage}.iso.pdf"/>
  <echo unless:set="ready-iso" message="ISO PDF not created"/>
  <echo if:set="ready-iso" message="ISO PDF created"/>
  <available property="ready-html" file="${dir}/${package}-${stage}.oasis.html"/>
  <echo unless:set="ready-html" message="HTML not created"/>
  <echo if:set="ready-html" message="HTML created"/>
  <!--these touches are necessary because unzip doesn't preserve time of day-->
<!--  <touch file="${dir}/${package}-${stage}.oasis.pdf"/>
  <touch file="${dir}/${package}-${stage}.iso.pdf"/>
  <touch file="${dir}/${package}-${stage}.oasis.html"/>-->
  <!--the names needed are not the names created-->
  <move preservelastmodified="true" file="${dir}/${package}-${stage}.oasis.pdf"
        tofile="${dir}/${package}-${stage}.pdf"/>
  <move preservelastmodified="true" file="${dir}/${package}-${stage}.oasis.html"
        tofile="${dir}/${package}-${stage}.html"/>
  <move preservelastmodified="true" file="${dir}/${package}-${stage}.iso.pdf"
        tofile="${dir}/iso-iec-00000-${package}-draft.pdf"/>
  <!--intermediate file no longer needed-->
  <delete file="${dir}/${package}-${stage}-pub.zip"/>
</target>

<target name="-package-supplemental-other" if="other-supplemental-needed">
  <mkdir dir="${dir}/${package}-${stage}-${label}/art/artpdf"/>
  <copy preservelastmodified="true"
        todir="${dir}/${package}-${stage}-${label}/art/artpdf">
    <fileset dir="art">
     <include name="*"/>
    </fileset>
  </copy>
</target>

<target name="-package-docs">
  <echo message="Checking existence of results..."/>
  <available property="xml-made" file="${dir}/${package}-${stage}.xml"/>
  <available property="html-made" file="${dir}/${package}-${stage}.html"/>
  <available property="pdf-made" file="${dir}/${package}-${stage}.pdf"/>
  <available property="iso-made"
             file="${dir}/iso-iec-00000-${package}-draft.pdf"/>
  <condition property="docs-not-made">
    <not>
      <and>
        <istrue value="${xml-made}"/>
        <or>
          <isset property="not-attempting-to-produce-necessary-results"/>
          <and>
            <istrue value="${html-made}"/>
            <istrue value="${pdf-made}"/>
            <istrue value="${iso-made}"/>
          </and>
        </or>
      </and>
    </not>
  </condition>
  <property name="xml-made" value="false"/>
  <property name="html-made" value="false"/>
  <property name="pdf-made" value="false"/>
  <property name="iso-made" value="false"/>

  <delete dir="${dir}/${package}-${stage}-${label}"/>
  <mkdir dir="${dir}/${package}-${stage}-${label}"/>
  <copy preservelastmodified="true"
        todir="${dir}/${package}-${stage}-${label}">
    <fileset dir="${dir}">
      <include name="xsd/**"/>
      <include name="sch/**"/>
      <include name="db/**"/>
      <include name="${package}-${stage}.*"/>
      <include name="iso*"/>
      <exclude name="*.txt"/>
    </fileset>
  </copy>
  <copy preservelastmodified="true"
        todir="${dir}/${package}-${stage}-${label}/art">
    <fileset dir="${dir}/htmlart">
      <include name="**"/>
    </fileset>
  </copy>
  <copy preservelastmodified="true"
        todir="${dir}/${package}-${stage}-${label}/art/pdfart">
    <fileset dir="${dir}/art">
      <include name="**"/>
    </fileset>
  </copy>
  <copy preservelastmodified="true"
        todir="${dir}/${package}-${stage}-${label}/db">
    <fileset dir="${dir}/db">
      <include name="**"/>
    </fileset>
  </copy>
</target>

<target name="-package-distribution">
  <echo message="Packaging results with artefacts and archive..."/>
  <delete file="${dir}/${package}-${stage}-${label}.zip"/>  
  <delete file="${dir}/${package}-${stage}-${label}-archive-only.zip"/>  

  <!--move around the files that are only to be archived-->
  <copy todir="${dir}/${package}-${stage}-${label}-archive-only">
    <fileset dir=".">
      <include name="produceGenericode.*"/>
      <include name="RealtaServerAnt.xml"/>
      <include name="*.xsl"/>
    </fileset>
    <fileset dir="${dir}">
      <include name="realta-user-parameters.xml"/>
    </fileset>
  </copy>
  <copy todir="${dir}/${package}-${stage}-${label}-archive-only/old-entities">
    <fileset dir=".">
      <include name="*.ent.xml"/>
    </fileset>
  </copy>
  <copy todir="${dir}/${package}-${stage}-${label}-archive-only/new-entities"
        if:set="entitiesCreated">
    <fileset dir="${dir}">
      <include name="*.ent.xml"/>
    </fileset>
  </copy>
  <move todir="${dir}/${package}-${stage}-${label}-archive-only">
    <fileset dir="${dir}">
      <include name="*.warnings.txt"/>
      <include name="*.console.txt"/>
    </fileset>
  </move>

</target>

</project>